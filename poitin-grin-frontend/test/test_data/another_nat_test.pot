main = let i = 2 in
        let j = 1 in
         let y = \f -> (\x -> f (x x)) (\x-> f (x x)) in
            let fac = \f x -> (case (lt x 1) of
                True -> 1
                | False -> mul x (f (minus x 1))) in
            eqNat (y fac 4) (24);

eqNat x y = case x of
               Zero -> (case y of
                           Zero -> True
                         | Succ(y) -> False)
             | Succ(x) -> case y of
                             Zero -> False
                           | Succ(y) -> eqNat x y;

plus x y = case x of
              Zero    -> y
            | Succ(x) -> Succ(plus x y);

mul x y = case x of
             Zero    -> Zero
           | Succ(x) -> plus y (mul x y);

minus x y = case y of
               Zero -> x
             | Succ(y) -> case x of
                             Zero -> Zero
                           | Succ(x) -> minus x y;

lt x y = case y of
            Zero -> False
          | Succ(y) -> case x of
                          Zero -> True
                        | Succ(x) -> lt x y
