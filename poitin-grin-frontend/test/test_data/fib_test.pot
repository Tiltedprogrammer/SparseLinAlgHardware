main = let i = 3 in
        eqNat (fib 6) 8;

fib n = case n of
    Zero -> Zero
    | Succ (x) -> (case x of
        Zero -> 1
        | Succ (y) -> (case y of
            Zero -> 1
            | Succ (z) -> plus (fib (minus n 1)) (fib (minus n 2)))
        );

eqNat x y = case x of
               Zero -> (case y of
                           Zero -> True
                         | Succ(y) -> False)
             | Succ(x) -> case y of
                             Zero -> False
                           | Succ(y) -> eqNat x y;

plus x y = case x of
              Zero    -> y
            | Succ(x) -> Succ(plus x y);

mul x y = case x of
             Zero    -> Zero
           | Succ(x) -> plus y (mul x y);

minus x y = case y of
               Zero -> x
             | Succ(y) -> case x of
                             Zero -> Zero
                           | Succ(x) -> minus x y
