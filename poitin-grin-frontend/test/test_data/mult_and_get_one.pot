main = let i = 2 in
        let j = 1 in
         let k = \x -> case x of
                        Zero -> 1
                        |Succ(x) -> 2 in
            eqNat (minus (mul (k j) i) (Succ ((\x-> plus x 1) 2))) 0;

eqNat x y = case x of
               Zero -> (case y of
                           Zero -> True
                         | Succ(y) -> False)
             | Succ(x) -> case y of
                             Zero -> False
                           | Succ(y) -> eqNat x y;

plus x y = case x of
              Zero    -> y
            | Succ(x) -> Succ(plus x y);

mul x y = case x of
             Zero    -> Zero
           | Succ(x) -> plus y (mul x y);

minus x y = case y of
               Zero -> x
             | Succ(y) -> case x of
                             Zero -> Zero
                           | Succ(x) -> minus x y
